service: artfullylondon-iteration-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: true

provider:
    name: aws
    runtime: nodejs8.10
    stage: production
    region: eu-west-1
    environment: ${file(env.yml):${self:custom.stage}}
    iamRoleStatements:
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "IterationLockDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "IterationDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "IterationErrorDynamoTable"
        -
            Effect: "Allow"
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "sns:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:sns:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":*"

plugins:
    - serverless-webpack
    - serverless-dynamodb-local
    - serverless-offline

custom:
    project: artfullylondon
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
    iterationLockTableName: ${self:custom.project}-${self:custom.stage}-iterationlock
    iterationTableName: ${self:custom.project}-${self:custom.stage}-iteration
    iterationErrorTableName: ${self:custom.project}-${self:custom.stage}-iterationerror
    webpack:
        includeModules: true
        packager: 'npm'
    dynamodb:
        start:
            port: 8000
            migrate: true
            sharedDb: true
            noStart: true

functions:
    startIteration:
        handler: src/handlers/start-iteration.handler
        timeout: 10
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ITERATON_LOCK_TABLE_NAME: ${self:custom.iterationLockTableName}
            SERVERLESS_ITERATON_TABLE_NAME: ${self:custom.iterationTableName}
    endIteration:
        handler: src/handlers/end-iteration.handler
        timeout: 10
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ITERATON_LOCK_TABLE_NAME: ${self:custom.iterationLockTableName}
            SERVERLESS_ITERATON_TABLE_NAME: ${self:custom.iterationTableName}
    addIterationError:
        handler: src/handlers/add-iteration-error.handler
        timeout: 10
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ITERATON_ERROR_TABLE_NAME: ${self:custom.iterationErrorTableName}
    getLatestErrors:
        handler: src/handlers/get-latest-iteration-errors.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ITERATON_TABLE_NAME: ${self:custom.iterationTableName}
            SERVERLESS_ITERATON_ERROR_TABLE_NAME: ${self:custom.iterationErrorTableName}
        events:
            - http:
                path: "errors/{actionId}"
                method: get
                cors: true

resources:
    Resources:
        IterationLockDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Delete
            Properties:
                TableName: ${self:custom.iterationLockTableName}
                AttributeDefinitions:
                    -
                        AttributeName: actionId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: actionId
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        IterationDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Delete
            Properties:
                TableName: ${self:custom.iterationTableName}
                AttributeDefinitions:
                    -
                        AttributeName: actionId
                        AttributeType: S
                    -
                        AttributeName: startTimestamp
                        AttributeType: N
                KeySchema:
                    -
                        AttributeName: actionId
                        KeyType: HASH
                    -
                        AttributeName: startTimestamp
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        IterationErrorDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Delete
            Properties:
                TableName: ${self:custom.iterationErrorTableName}
                AttributeDefinitions:
                    -
                        AttributeName: actionIdStartTimestamp
                        AttributeType: S
                    -
                        AttributeName: entityId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: actionIdStartTimestamp
                        KeyType: HASH
                    -
                        AttributeName: entityId
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
