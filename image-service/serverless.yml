service: artfullylondon-image-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: false

provider:
    name: aws
    runtime: nodejs4.3
    stage: production
    region: eu-west-1
    environment: ${file(env.yml):${self:custom.stage}}
    iamRoleStatements:
        -
            Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "ImageDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "AsyncControlDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "AsyncControlErrorDynamoTable"
        -
            Effect: "Allow"
            Action: "s3:*"
            Resource:
                -
                    Fn::Join:
                        - ""
                        -
                            - "arn:aws:s3:::"
                            - Ref: "OriginalImagesS3Bucket"
                            - "/*"
                -
                    Fn::Join:
                        - ""
                        -
                            - "arn:aws:s3:::"
                            - Ref: "ResizedImagesS3Bucket"
                            - "/*"
        -
            Effect: "Allow"
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "sns:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:sns:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":*"

plugins:
    - serverless-webpack

custom:
    project: artfullylondon
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
    adminSiteOrigin: https://www.artfully-admin.site
    publicSiteOrigin: https://www.artfully.london
    imageTableName: ${self:custom.project}-${self:custom.stage}-image
    asyncControlTableName: ${self:custom.project}-${self:custom.stage}-image-asynccontrol
    asyncControlErrorTableName: ${self:custom.project}-${self:custom.stage}-image-asynccontrol-error
    originalImagesBucketName: ${self:custom.project}-${self:custom.stage}-original-images
    resizedImagesBucketName: ${self:custom.project}-${self:custom.stage}-resized-images
    reprocessImagesSnsEndpointName: "ReprocessImages"
    reprocessImagesTopicArn: ${file(./env.yml):${self:custom.stage}.topicArnPrefix}:${self:custom.reprocessImagesSnsEndpointName}
    startIterationLambdaName: artfullylondon-iteration-service-${self:custom.stage}-startIteration
    endIterationLambdaName: artfullylondon-iteration-service-${self:custom.stage}-endIteration
    addIterationErrorLambdaName: artfullylondon-iteration-service-${self:custom.stage}-addIterationError
    webpackIncludeModules: true

functions:
    addImage:
        handler: handlers/add-image.handler
        timeout: 60
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_IMAGE_TABLE_NAME: ${self:custom.imageTableName}
            SERVERLESS_ORIGINAL_IMAGES_BUCKET_NAME: ${self:custom.originalImagesBucketName}
            SERVERLESS_RESIZED_IMAGES_BUCKET_NAME: ${self:custom.resizedImagesBucketName}
        events:
            - http:
                path: "image/{id}"
                method: put
                cors: true
    getImage:
        handler: handlers/get-image.handler
        timeout: 6
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_IMAGE_TABLE_NAME: ${self:custom.imageTableName}
            SERVERLESS_ORIGINAL_IMAGES_BUCKET_NAME: ${self:custom.originalImagesBucketName}
            SERVERLESS_RESIZED_IMAGES_BUCKET_NAME: ${self:custom.resizedImagesBucketName}
        events:
            - http:
                path: "image/{id}"
                method: get
                cors: true
    reprocessImages:
        handler: handlers/reprocess-images.handler
        timeout: 6
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ASYNC_CONTROL_TABLE_NAME: ${self:custom.asyncControlTableName}
            SERVERLESS_REPROCESS_IMAGES_TOPIC_ARN: ${self:custom.reprocessImagesTopicArn}
            SERVERLESS_START_ITERATION_LAMBDA_NAME: ${self:custom.startIterationLambdaName}
        events:
            - http:
                path: "images/reprocess"
                method: post
                cors: true
    reprocessImagesSns:
        handler: handlers/reprocess-images-sns.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_IMAGE_TABLE_NAME: ${self:custom.imageTableName}
            SERVERLESS_ORIGINAL_IMAGES_BUCKET_NAME: ${self:custom.originalImagesBucketName}
            SERVERLESS_RESIZED_IMAGES_BUCKET_NAME: ${self:custom.resizedImagesBucketName}
            SERVERLESS_ASYNC_CONTROL_TABLE_NAME: ${self:custom.asyncControlTableName}
            SERVERLESS_ASYNC_CONTROL_ERROR_TABLE_NAME: ${self:custom.asyncControlErrorTableName}
            SERVERLESS_REPROCESS_IMAGES_TOPIC_ARN: ${self:custom.reprocessImagesTopicArn}
            SERVERLESS_END_ITERATION_LAMBDA_NAME: ${self:custom.endIterationLambdaName}
            SERVERLESS_ADD_ITERATION_ERROR_LAMBDA_NAME: ${self:custom.addIterationErrorLambdaName}
        timeout: 300
        events:
            - sns: "${self:custom.reprocessImagesSnsEndpointName}"

resources:
    Resources:
        ApiGatewayMethodImageIdVarPut:
            Properties:
                AuthorizationType: "COGNITO_USER_POOLS"
                AuthorizerId: ${file(./env.yml):${self:custom.stage}.cognitoUserPoolsAuthorizerId}
        ApiGatewayMethodImagesReprocessPost:
            Properties:
                AuthorizationType: "COGNITO_USER_POOLS"
                AuthorizerId: ${file(./env.yml):${self:custom.stage}.cognitoUserPoolsAuthorizerId}
        ImageDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.imageTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        AsyncControlDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Delete
            Properties:
                TableName: ${self:custom.asyncControlTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        AsyncControlErrorDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Delete
            Properties:
                TableName: ${self:custom.asyncControlErrorTableName}
                AttributeDefinitions:
                    -
                        AttributeName: processId
                        AttributeType: S
                    -
                        AttributeName: messageId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: processId
                        KeyType: HASH
                    -
                        AttributeName: messageId
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        OriginalImagesS3Bucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Retain
            Properties:
                BucketName: ${self:custom.originalImagesBucketName}
                CorsConfiguration:
                    CorsRules:
                        -
                            AllowedHeaders:
                                - "*"
                            AllowedMethods:
                                - GET
                            AllowedOrigins:
                                - ${self:custom.adminSiteOrigin}
                            ExposedHeaders:
                                - DATE
                            Id: ${self:custom.originalImagesBucketName}
                            MaxAge: "3600"
        OriginalImagesS3BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket:
                    Ref: "OriginalImagesS3Bucket"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Sid: AddPerm
                            Effect: Allow
                            Principal: "*"
                            Action:
                                - "s3:GetObject"
                            Resource:
                                Fn::Join:
                                    - ""
                                    -
                                        - "arn:aws:s3:::"
                                        - Ref: "OriginalImagesS3Bucket"
                                        - "/*"
        ResizedImagesS3Bucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Retain
            Properties:
                BucketName: ${self:custom.resizedImagesBucketName}
                WebsiteConfiguration:
                    IndexDocument: "index.html"
                CorsConfiguration:
                    CorsRules:
                        -
                            AllowedHeaders:
                                - "*"
                            AllowedMethods:
                                - GET
                            AllowedOrigins:
                                - ${self:custom.adminSiteOrigin}
                                - ${self:custom.publicSiteOrigin}
                            ExposedHeaders:
                                - DATE
                            Id: ${self:custom.resizedImagesBucketName}
                            MaxAge: "3600"
        ResizedImagesS3BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket:
                    Ref: "ResizedImagesS3Bucket"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        -
                            Sid: AddPerm
                            Effect: Allow
                            Principal: "*"
                            Action:
                                - "s3:GetObject"
                            Resource:
                                Fn::Join:
                                    - ""
                                    -
                                        - "arn:aws:s3:::"
                                        - Ref: "ResizedImagesS3Bucket"
                                        - "/*"
