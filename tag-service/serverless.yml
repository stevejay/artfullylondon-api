service: artfullylondon-tag-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: true

provider:
    name: aws
    runtime: nodejs8.10
    region: eu-west-1
    tracing: true
    environment: ${file(env.yml):${self:custom.stage}}
    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    iamRoleStatements:
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "TagDynamoTable"

plugins:
    - serverless-webpack
    - serverless-pseudo-parameters
    - serverless-plugin-tracing
    - serverless-dynamodb-local
    - serverless-offline

custom:
    project: artfullylondon
    stage: "${opt:stage}"
    region: "${opt:region, self:provider.region}"
    tagTableName: ${self:custom.project}-${self:custom.stage}-tag
    errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"error\": \"$inputRoot\" }"
    standardResponses:
        headers:
            Access-Control-Allow-Credentials : "'true'"
        template: $input.path('$')
        statusCodes:
            200:
                pattern: ''
                template:
                    application/json: $input.path("$.body")
                headers:
                    Cache-Control: integration.response.body.headers.Cache-Control
            400:
                pattern: '^\[400\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            401:
                pattern: '^\[401\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            403:
                pattern: '^\[403\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            404:
                pattern: '^\[404\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            500:
                pattern: '^\[500\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules:
            forceExclude:
                - aws-sdk
        packager: 'yarn'
    dynamodb:
        start:
            port: 4569
            migrate: true
            sharedDb: true
            noStart: true

functions:
    graphql:
        handler: src/lambda/graphql.graphqlHandler
        environment:
            SERVERLESS_TAG_TABLE_NAME: ${self:custom.tagTableName}
        events:
            - http:
                path: graphql
                method: post
                cors: true
            - http:
                path: graphql
                method: get
                cors: true
        authorizer:
            name: authorizer
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    createTag:
        handler: src/lambda/create-tag.handler
        environment:
            SERVERLESS_TAG_TABLE_NAME: ${self:custom.tagTableName}
        events:
            - http:
                path: "tag/{tagType}"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "tagType": "$input.params('tagType')",
                                "label": $input.json('$.label'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    deleteTag:
        handler: src/lambda/delete-tag.handler
        environment:
            SERVERLESS_TAG_TABLE_NAME: ${self:custom.tagTableName}
        events:
            - http:
                path: "tag/{id+}"
                method: delete
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getAllTags:
        handler: src/lambda/get-all-tags.handler
        environment:
            SERVERLESS_TAG_TABLE_NAME: ${self:custom.tagTableName}
        events:
            - http:
                path: tags
                method: get
                cors: true
                integration: lambda
                response: ${self:custom.standardResponses}
    getTags:
        handler: src/lambda/get-tags.handler
        environment:
            SERVERLESS_TAG_TABLE_NAME: ${self:custom.tagTableName}
        events:
            - http:
                path: "tags/{tagType}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "tagType": "$input.params('tagType')"
                            }
                response: ${self:custom.standardResponses}

resources:
    Resources:
        TagDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.tagTableName}
                AttributeDefinitions:
                    -
                        AttributeName: tagType
                        AttributeType: S
                    -
                        AttributeName: id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: tagType
                        KeyType: HASH
                    -
                        AttributeName: id
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
