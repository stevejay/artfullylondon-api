service: artfullylondon-monitor-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: false

provider:
    name: aws
    runtime: nodejs4.3
    stage: production
    region: eu-west-1
    environment: ${file(env.yml):${self:custom.stage}}
    iamRoleStatements:
        -
            Effect: "Allow"
            Action: "cloudwatch:PutMetricData"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventMonitorDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "VenueMonitorDynamoTable"
        -
            Effect: "Allow"
            Action: "sns:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:sns:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":*"

plugins:
    - serverless-webpack

custom:
    project: artfullylondon
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
    startIterationLambdaName: artfullylondon-iteration-service-${self:custom.stage}-startIteration
    endIterationLambdaName: artfullylondon-iteration-service-${self:custom.stage}-endIteration
    addIterationErrorLambdaName: artfullylondon-iteration-service-${self:custom.stage}-addIterationError
    getLatestIterationErrorsLambdaName: artfullylondon-iteration-service-${self:custom.stage}-getLatestErrors
    getNextVenueLambdaName: artfullylondon-event-service-${self:custom.stage}-getNextVenue
    eventMonitorTableName: ${self:custom.project}-${self:custom.stage}-eventmonitor
    venueMonitorTableName: ${self:custom.project}-${self:custom.stage}-venuemonitor
    iterateVenuesSnsEndpointName: "MonitorServiceIterateVenues"
    iterateVenuesTopicArn: ${file(./env.yml):${self:custom.stage}.topicArnPrefix}:${self:custom.iterateVenuesSnsEndpointName}
    webpackIncludeModules: true

functions:
    getVenueMonitor:
        handler: handlers/venue-monitor/get-venue-monitor.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_VENUE_MONITOR_TABLE_NAME: ${self:custom.venueMonitorTableName}
        events:
            - http:
                path: "monitor/venue/{venueId}"
                method: get
                cors: true
    updateVenueMonitor:
        handler: handlers/venue-monitor/update-venue-monitor.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_VENUE_MONITOR_TABLE_NAME: ${self:custom.venueMonitorTableName}
        events:
            - http:
                path: "monitor/venue/{venueId}"
                method: put
                cors: true
    getEventMonitors:
        handler: handlers/venue-event-monitor/get-venue-event-monitors.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_EVENT_MONITOR_TABLE_NAME: ${self:custom.eventMonitorTableName}
        events:
            - http:
                path: "monitor/venue/{venueId}/event/"
                method: get
                cors: true
    getEventMonitor:
        handler: handlers/venue-event-monitor/get-venue-event-monitor.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_EVENT_MONITOR_TABLE_NAME: ${self:custom.eventMonitorTableName}
        events:
            - http:
                path: "monitor/venue/{venueId}/event/{externalEventId}"
                method: get
                cors: true
    updateEventMonitor:
        handler: handlers/venue-event-monitor/update-venue-event-monitor.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_EVENT_MONITOR_TABLE_NAME: ${self:custom.eventMonitorTableName}
        events:
            - http:
                path: "monitor/venue/{venueId}/event/{externalEventId}"
                method: put
                cors: true
    iterateVenues:
        handler: handlers/iterate-venues.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_ITERATE_VENUES_TOPIC_ARN: ${self:custom.iterateVenuesTopicArn}
            SERVERLESS_GET_NEXT_VENUE_LAMBDA_NAME: ${self:custom.getNextVenueLambdaName}
            SERVERLESS_START_ITERATION_LAMBDA_NAME: ${self:custom.startIterationLambdaName}
        events:
            - http:
                path: "monitor/venues"
                method: post
                cors: true
            # - schedule:
            #     rate: cron(0 10 * * ? *) # 10:00 a.m. daily
            #     enabled: true
    iterateVenuesSns:
        handler: handlers/iterate-venues-sns.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_EVENT_MONITOR_TABLE_NAME: ${self:custom.eventMonitorTableName}
            SERVERLESS_VENUE_MONITOR_TABLE_NAME: ${self:custom.venueMonitorTableName}
            SERVERLESS_ITERATE_VENUES_TOPIC_ARN: ${self:custom.iterateVenuesTopicArn}
            SERVERLESS_GET_NEXT_VENUE_LAMBDA_NAME: ${self:custom.getNextVenueLambdaName}
            SERVERLESS_END_ITERATION_LAMBDA_NAME: ${self:custom.endIterationLambdaName}
            SERVERLESS_ADD_ITERATION_ERROR_LAMBDA_NAME: ${self:custom.addIterationErrorLambdaName}
        timeout: 300
        events:
            - sns: "${self:custom.iterateVenuesSnsEndpointName}"
    monitorStatusEmail:
        handler: handlers/send-monitor-status-email.handler
        environment:
            SERVERLESS_REGION: ${self:custom.region}
            SERVERLESS_EVENT_MONITOR_TABLE_NAME: ${self:custom.eventMonitorTableName}
            SERVERLESS_VENUE_MONITOR_TABLE_NAME: ${self:custom.venueMonitorTableName}
            SERVERLESS_GET_LATEST_ITERATION_ERRORS_LAMBDA_NAME: ${self:custom.getLatestIterationErrorsLambdaName}
        timeout: 60
        events:
            - http:
                path: "monitor/status"
                method: get
                cors: true
            - schedule:
                rate: cron(0 11 * * ? *) # 11:00 a.m. daily
                enabled: true

resources:
    Resources:
        ApiGatewayMethodMonitorVenueVenueidVarEventExternaleventidVarPut:
            Properties:
                AuthorizationType: "COGNITO_USER_POOLS"
                AuthorizerId: ${file(./env.yml):${self:custom.stage}.cognitoUserPoolsAuthorizerId}
        ApiGatewayMethodMonitorVenuesPost:
            Properties:
                AuthorizationType: "COGNITO_USER_POOLS"
                AuthorizerId: ${file(./env.yml):${self:custom.stage}.cognitoUserPoolsAuthorizerId}
        EventMonitorDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.eventMonitorTableName}
                AttributeDefinitions:
                    -
                        AttributeName: venueId
                        AttributeType: S
                    -
                        AttributeName: externalEventId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: venueId
                        KeyType: HASH
                    -
                        AttributeName: externalEventId
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 4
                    WriteCapacityUnits: 2
        VenueMonitorDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.venueMonitorTableName}
                AttributeDefinitions:
                    -
                        AttributeName: venueId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: venueId
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 4
                    WriteCapacityUnits: 2
