service: artfullylondon-graphql-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: true

provider:
    name: aws
    runtime: nodejs8.10
    region: eu-west-1
    tracing: true
    environment: ${file(env.yml):${self:custom.stage}}
    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

plugins:
    - serverless-webpack
    - serverless-pseudo-parameters
    - serverless-plugin-tracing
    - serverless-offline

custom:
    project: artfullylondon
    stage: "${opt:stage}"
    region: "${opt:region, self:provider.region}"
    errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"error\": \"$inputRoot\" }"
    standardResponses:
        headers:
            Access-Control-Allow-Credentials : "'true'"
        template: $input.path('$')
        statusCodes:
            200:
                pattern: ''
                template:
                    application/json: $input.path("$.body")
                headers:
                    Cache-Control: integration.response.body.headers.Cache-Control
            400:
                pattern: '^\[400\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            401:
                pattern: '^\[401\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            403:
                pattern: '^\[403\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            404:
                pattern: '^\[404\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            500:
                pattern: '^\[500\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules:
            forceExclude:
                - aws-sdk
        packager: 'yarn'

functions:
    graphql:
        handler: src/lambda/graphql.graphqlHandler
        events:
            - http:
                path: graphql
                method: post
                cors: true
            - http:
                path: graphql
                method: get
                cors: true
    graphqlInspector:
        handler: src/lambda/graphql.graphiqlHandler
        events:
            - http:
                path: graphiql
                method: get
                cors: true
                # integration: lambda
                # request:
                #     template:
                #         application/json: >
                #             {
                #                 "type": "$input.params('type')",
                #                 "label": $input.json('$.label'),
                #                 "authorization" : "$input.params().header.get('Authorization')"
                #             }
                # response: ${self:custom.standardResponses}
                # authorizer:
                #     name: authorizer
                #     arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
