service: artfullylondon-search-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: true

provider:
    name: aws
    runtime: nodejs8.10
    region: eu-west-1
    tracing: true
    environment: ${file(env.yml):${self:custom.stage}}
    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

plugins:
    - serverless-webpack
    - serverless-pseudo-parameters
    - serverless-plugin-tracing
    - serverless-offline-sns
    - serverless-offline

custom:
    project: artfullylondon
    stage: ${opt:stage}
    region: ${opt:region, self:provider.region}
    indexDocumentTopicName: IndexDocument
    errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"error\": \"$inputRoot\" }"
    standardResponses:
        headers:
            Access-Control-Allow-Credentials : "'true'"
        template: $input.path('$')
        statusCodes:
            200:
                pattern: ''
                template:
                    application/json: $input.path("$.body")
                headers:
                    Cache-Control: integration.response.body.headers.Cache-Control
            400:
                pattern: '^\[400\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            401:
                pattern: '^\[401\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            403:
                pattern: '^\[403\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            404:
                pattern: '^\[404\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            500:
                pattern: '^\[500\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules:
            forceExclude:
                - aws-sdk
        packager: 'yarn'
    serverless-offline-sns:
        port: 4002
        debug: false
        accountId: 1111111111111

functions:
    autocompleteSearch:
        handler: src/lambda/autocomplete-search-handler.handler
        events:
            - http:
                path: "search/auto"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "admin": "$input.params('admin')",
                                "term" : "$input.params('term')",
                                "entityType" : "$input.params('entityType')"
                            }
                response: ${self:custom.standardResponses}
    basicSearch:
        handler: src/lambda/basic-search-handler.handler
        events:
            - http:
                path: "search/basic"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "admin": "$input.params('admin')",
                                "term" : "$input.params('term')",
                                "entityType" : "$input.params('entityType')",
                                "north" : "$input.params('north')",
                                "west" : "$input.params('west')",
                                "south" : "$input.params('south')",
                                "east" : "$input.params('east')",
                                "skip" : "$input.params('skip')",
                                "take" : "$input.params('take')"
                            }
                response: ${self:custom.standardResponses}
    eventAdvancedSearch:
        handler: src/lambda/event-advanced-search-handler.handler
        events:
            - http:
                path: "search/event"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "admin": "$input.params('admin')",
                                "term" : "$input.params('term')",
                                "dateFrom" : "$input.params('dateFrom')",
                                "dateTo" : "$input.params('dateTo')",
                                "timeFrom" : "$input.params('timeFrom')",
                                "timeTo" : "$input.params('timeTo')",
                                "area" : "$input.params('area')",
                                "medium" : "$input.params('medium')",
                                "style" : "$input.params('style')",
                                "audience" : "$input.params('audience')",
                                "cost" : "$input.params('cost')",
                                "booking" : "$input.params('booking')",
                                "venueId" : "$input.params('venueId')",
                                "talentId" : "$input.params('talentId')",
                                "north" : "$input.params('north')",
                                "west" : "$input.params('west')",
                                "south" : "$input.params('south')",
                                "east" : "$input.params('east')",
                                "skip" : "$input.params('skip')",
                                "take" : "$input.params('take')"
                            }
                response: ${self:custom.standardResponses}
    presetSearch:
        handler: src/lambda/preset-search-handler.handler
        events:
            - http:
                path: "search/preset/{name}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "admin": "$input.params('admin')",
                                "id" : "$input.params('id')",
                                "name" : "$input.params('name')"
                            }
                response: ${self:custom.standardResponses}
    indexDocument:
        handler: src/lambda/index-document-handler.handler
        timeout: 300
        events:
            - sns:
                topicName: ${self:custom.indexDocumentTopicName}-${self:custom.stage}
                displayName: Index a document so it is searchable
