enum EntityTypeEnum {
  EVENT
  EVENT_SERIES
  TALENT
  VENUE
}

enum StatusTypeEnum {
  PENDING
  ACTIVE
  DELETED
  MERGED
}

enum VenueTypeEnum {
  THEATRE
  ART_GALLERY
  CONCERT_HALL
  EXHIBITION_HALL
  PERFORMING_ARTS_CENTRE
  MUSEUM
  CHURCH
  CINEMA
  OTHER
}

enum TalentTypeEnum {
  INDIVIDUAL
  GROUP
}

enum EventTypeEnum {
  PERFORMANCE
  EXHIBITION
  COURSE
}

interface AutocompleteNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
}

type AutocompleteEvent implements AutocompleteNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
  eventType: EventTypeEnum!
}

type AutocompleteEventSeries implements AutocompleteNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
}

type AutocompleteVenue implements AutocompleteNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
  venueType: VenueTypeEnum!
  address: String!
  postcode: String!
}

type AutocompleteTalent implements AutocompleteNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
  talentType: TalentTypeEnum!
  commonRole: String!
}

type AutocompleteResult {
  results: [AutocompleteNode!]!
}

type PageInfo {
  hasNextPage: Boolean!
}

interface SearchNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
}

type Event implements SearchNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
}

type EventSeries implements SearchNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
}

type Talent implements SearchNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  firstNames: String
  lastName: String!
  commonRole: String!
}

type Venue implements SearchNode {
  id: ID!
  entityType: EntityTypeEnum!
  status: StatusTypeEnum!
  name: String!
}

type SearchEdge {
  node: SearchNode!
  cursor: String!
}

# TODO cursor should be a custom scalar that serializes to a string.

type SearchConnection {
  edges: [SearchEdge!]!
  pageInfo: PageInfo!
}

type Query {
  autocompleteSearch(
    term: String!
    entityType: EntityTypeEnum
  ): AutocompleteResult
  basicSearch(
    term: String
    entityType: EntityTypeEnum
    status: StatusTypeEnum
    north: Float
    south: Float
    east: Float
    west: Float
    first: Int
    after: String
  ): SearchConnection
}
