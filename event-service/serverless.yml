service: artfullylondon-event-service

frameworkVersion: ">=1.2.0 <2.0.0"

package:
    individually: true

provider:
    name: aws
    runtime: nodejs8.10
    region: eu-west-1
    tracing: true
    environment: ${file(env.yml):${self:custom.stage}}
    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    iamRoleStatements:
        -
            Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: "*"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "IterationLogDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "VenueDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "VenueDynamoTable"
                        - "/index/"
                        - ${self:custom.venueBySchemeVersionIndexName}
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventDynamoTable"
                        - "/index/"
                        - ${self:custom.eventBySchemeVersionIndexName}
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventDynamoTable"
                        - "/index/"
                        - ${self:custom.eventByVenueIndexName}
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventDynamoTable"
                        - "/index/"
                        - ${self:custom.eventByEventSeriesIndexName}
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventSeriesDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "EventSeriesDynamoTable"
                        - "/index/"
                        - ${self:custom.eventSeriesBySchemeVersionIndexName}
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "TalentDynamoTable"
        -
            Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:dynamodb:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":table/"
                        - Ref: "TalentDynamoTable"
                        - "/index/"
                        - ${self:custom.talentBySchemeVersionIndexName}
        -
            Effect: "Allow"
            Action: "sns:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:sns:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":*"
        -
            Effect: "Allow"
            Action: "sns:*"
            Resource:
                Fn::Join:
                    - ""
                    -
                        - "arn:aws:sns:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":"
                        - ${self:custom.indexDocumentTopicName}

plugins:
    - serverless-webpack
    - serverless-pseudo-parameters
    - serverless-plugin-tracing
    - serverless-dynamodb-local
    - serverless-offline-sns
    - serverless-offline

custom:
    project: artfullylondon
    stage: ${opt:stage}
    region: ${opt:region, self:provider.region}
    env: ${file(./env.yml):${self:custom.stage}}
    refreshSearchIndexTopicNamePrefix: RefreshSearchIndex
    eventUpdatedTopicNamePrefix: EventUpdated
    indexDocumentTopicNamePrefix: IndexDocument
    iterationLogTableName: ${self:custom.project}-${self:custom.stage}-event-iteration-log
    venueTableName: ${self:custom.project}-${self:custom.stage}-venue
    venueBySchemeVersionIndexName: ${self:custom.project}-${self:custom.stage}-venue-by-scheme
    eventTableName: ${self:custom.project}-${self:custom.stage}-event
    eventBySchemeVersionIndexName: ${self:custom.project}-${self:custom.stage}-event-by-scheme
    eventByVenueIndexName: ${self:custom.project}-${self:custom.stage}-event-by-venue
    eventByEventSeriesIndexName: ${self:custom.project}-${self:custom.stage}-event-by-eventseries
    eventSeriesTableName: ${self:custom.project}-${self:custom.stage}-eventseries
    eventSeriesBySchemeVersionIndexName: ${self:custom.project}-${self:custom.stage}-eventseries-by-scheme
    talentTableName: ${self:custom.project}-${self:custom.stage}-talent
    talentBySchemeVersionIndexName: ${self:custom.project}-${self:custom.stage}-talent-by-scheme
    eventUpdatedTopicName: ${self:custom.eventUpdatedTopicNamePrefix}-${self:custom.stage}
    refreshSearchIndexTopicName: ${self:custom.refreshSearchIndexTopicNamePrefix}-${self:custom.stage}
    indexDocumentTopicName: ${self:custom.indexDocumentTopicNamePrefix}-${self:custom.stage}
    eventUpdatedTopicArn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.eventUpdatedTopicName}"
    refreshSearchIndexTopicArn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.refreshSearchIndexTopicName}"
    indexDocumentTopicArn: "arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.indexDocumentTopicName}"
    errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"error\": \"$inputRoot\" }"
    standardResponses:
        headers:
            Access-Control-Allow-Credentials : "'true'"
        template: $input.path('$')
        statusCodes:
            200:
                pattern: ''
                template:
                    application/json: $input.path("$.body")
                headers:
                    Cache-Control: integration.response.body.headers.cache-control
                    etag: integration.response.body.headers.etag
            400:
                pattern: '^\[400\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            401:
                pattern: '^\[401\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            403:
                pattern: '^\[403\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            404:
                pattern: '^\[404\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
            500:
                pattern: '^\[500\].*'
                template:
                    application/json: ${self:custom.errorResponseTemplate}
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules:
            forceExclude:
                - aws-sdk
        packager: 'yarn'
    dynamodb:
        start:
            port: 4569
            migrate: true
            sharedDb: true
            noStart: true
    serverless-offline-sns:
        port: 4002
        debug: false
        accountId: 1111111111111

functions:
    createUpdateVenue:
        handler: src/lambda/venue/create-or-update-venue.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
            SERVERLESS_INDEX_DOCUMENT_TOPIC_ARN: ${self:custom.indexDocumentTopicArn}
        events:
            - http:
                path: "admin/venue"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
            - http:
                path: "admin/venue/{id+}"
                method: put
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getVenue:
        handler: src/lambda/venue/get-venue.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/venue/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "ifNoneMatch" : "$input.params().header.get('If-None-Match')"
                            }
                response: ${self:custom.standardResponses}
    getVenueForEdit:
        handler: src/lambda/venue/get-venue-for-edit.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "admin/venue/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getVenueMulti:
        handler: src/lambda/venue/get-venue-multi.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/venue"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": $input.json('$.ids')
                            }
                response: ${self:custom.standardResponses}
            - http:
                path: "public/venue"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": "$input.params('ids')"
                            }
                response: ${self:custom.standardResponses}
    createUpdateTalent:
        handler: src/lambda/talent/create-or-update-talent.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
            SERVERLESS_INDEX_DOCUMENT_TOPIC_ARN: ${self:custom.indexDocumentTopicArn}
        events:
            - http:
                path: "admin/talent"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
            - http:
                path: "admin/talent/{id+}"
                method: put
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getTalent:
        handler: src/lambda/talent/get-talent.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/talent/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "ifNoneMatch" : "$input.params().header.get('If-None-Match')"
                            }
                response: ${self:custom.standardResponses}
    getTalentForEdit:
        handler: src/lambda/talent/get-talent-for-edit.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "admin/talent/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getTalentMulti:
        handler: src/lambda/talent/get-talent-multi.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/talent"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": $input.json('$.ids')
                            }
                response: ${self:custom.standardResponses}
            - http:
                path: "public/talent"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": "$input.params('ids')"
                            }
                response: ${self:custom.standardResponses}
    createUpdateEvent:
        handler: src/lambda/event/create-or-update-event.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
            SERVERLESS_INDEX_DOCUMENT_TOPIC_ARN: ${self:custom.indexDocumentTopicArn}
        events:
            - http:
                path: "admin/event"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
            - http:
                path: "admin/event/{id+}"
                method: put
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getEvent:
        handler: src/lambda/event/get-event.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/event/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "ifNoneMatch" : "$input.params().header.get('If-None-Match')"
                            }
                response: ${self:custom.standardResponses}
    getEventForEdit:
        handler: src/lambda/event/get-event-for-edit.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "admin/event/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getEventMulti:
        handler: src/lambda/event/get-event-multi.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/event"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": $input.json('$.ids')
                            }
                response: ${self:custom.standardResponses}
            - http:
                path: "public/event"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": "$input.params('ids')"
                            }
                response: ${self:custom.standardResponses}
    createUpdateEventSeries:
        handler: src/lambda/event-series/create-or-update-event-series.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
            SERVERLESS_INDEX_DOCUMENT_TOPIC_ARN: ${self:custom.indexDocumentTopicArn}
        events:
            - http:
                path: "admin/event-series"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
            - http:
                path: "admin/event-series/{id+}"
                method: put
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "body": $input.json('$'),
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getEventSeries:
        handler: src/lambda/event-series/get-event-series.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/event-series/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "ifNoneMatch" : "$input.params().header.get('If-None-Match')"
                            }
                response: ${self:custom.standardResponses}
    getEventSeriesForEdit:
        handler: src/lambda/event-series/get-event-series-for-edit.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "admin/event-series/{id+}"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "id": "$input.params('id')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    getEventSeriesMulti:
        handler: src/lambda/event-series/get-event-series-multi.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - http:
                path: "public/event-series"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": $input.json('$.ids')
                            }
                response: ${self:custom.standardResponses}
            - http:
                path: "public/event-series"
                method: get
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "ids": "$input.params('ids')"
                            }
                response: ${self:custom.standardResponses}
    updateEventSearchIndex:
        handler: src/lambda/search/update-event-search-index-sns.handler
        environment:
            SERVERLESS_STAGE: ${self:custom.stage}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
        events:
            - sns:
                topicName: ${self:custom.eventUpdatedTopicName}
                displayName: Notify the service that an event has been updated
    refreshSearchIndex:
        handler: src/lambda/search/refresh-search-index.handler
        environment:
            SERVERLESS_ITERATION_LOG_TABLE_NAME: ${self:custom.iterationLogTableName}
            SERVERLESS_REFRESH_SEARCH_INDEX_TOPIC_ARN: ${self:custom.refreshSearchIndexTopicArn}
        events:
            - http:
                path: "admin/search/refresh/{entityType}"
                method: post
                cors: true
                integration: lambda
                request:
                    template:
                        application/json: >
                            {
                                "entityType": "$input.params('entityType')",
                                "authorization" : "$input.params().header.get('Authorization')"
                            }
                response: ${self:custom.standardResponses}
                authorizer:
                    name: authorizer
                    arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}
    refreshSearchIndexSns:
        handler: src/lambda/search/refresh-search-index-sns.handler
        environment:
            SERVERLESS_ITERATION_LOG_TABLE_NAME: ${self:custom.iterationLogTableName}
            SERVERLESS_VENUE_TABLE_NAME: ${self:custom.venueTableName}
            SERVERLESS_VENUE_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.venueBySchemeVersionIndexName}
            SERVERLESS_EVENT_TABLE_NAME: ${self:custom.eventTableName}
            SERVERLESS_EVENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventBySchemeVersionIndexName}
            SERVERLESS_EVENT_BY_VENUE_INDEX_NAME: ${self:custom.eventByVenueIndexName}
            SERVERLESS_EVENT_BY_EVENT_SERIES_INDEX_NAME: ${self:custom.eventByEventSeriesIndexName}
            SERVERLESS_EVENT_SERIES_TABLE_NAME: ${self:custom.eventSeriesTableName}
            SERVERLESS_EVENT_SERIES_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.eventSeriesBySchemeVersionIndexName}
            SERVERLESS_TALENT_TABLE_NAME: ${self:custom.talentTableName}
            SERVERLESS_TALENT_BY_SCHEME_VERSION_INDEX_NAME: ${self:custom.talentBySchemeVersionIndexName}
            SERVERLESS_EVENT_UPDATED_TOPIC_ARN: ${self:custom.eventUpdatedTopicArn}
            SERVERLESS_REFRESH_SEARCH_INDEX_TOPIC_ARN: ${self:custom.refreshSearchIndexTopicArn}
            SERVERLESS_INDEX_DOCUMENT_TOPIC_ARN: ${self:custom.indexDocumentTopicArn}
        timeout: 300
        events:
            - sns:
                topicName: ${self:custom.refreshSearchIndexTopicName}
                displayName: Refreshing of a search index

resources:
    Resources:
        IterationLogDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.iterationLogTableName}
                AttributeDefinitions:
                    -
                        AttributeName: actionId
                        AttributeType: S
                    -
                        AttributeName: iterationId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: actionId
                        KeyType: HASH
                    -
                        AttributeName: iterationId
                        KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
        VenueDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.venueTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                    -
                        AttributeName: schemeVersion
                        AttributeType: N
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    -
                        IndexName: ${self:custom.venueBySchemeVersionIndexName}
                        KeySchema:
                            -
                                AttributeName: "schemeVersion"
                                KeyType: HASH
                        Projection:
                            ProjectionType: "KEYS_ONLY"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
        EventDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.eventTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                    -
                        AttributeName: schemeVersion
                        AttributeType: N
                    -
                        AttributeName: venueId
                        AttributeType: S
                    -
                        AttributeName: eventSeriesId
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    -
                        IndexName: ${self:custom.eventBySchemeVersionIndexName}
                        KeySchema:
                            -
                                AttributeName: schemeVersion
                                KeyType: HASH
                        Projection:
                            ProjectionType: "KEYS_ONLY"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
                    -
                        IndexName: ${self:custom.eventByVenueIndexName}
                        KeySchema:
                            -
                                AttributeName: venueId
                                KeyType: HASH
                        Projection:
                            NonKeyAttributes:
                                - dateFrom
                                - dateTo
                            ProjectionType: "INCLUDE"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
                    -
                        IndexName: ${self:custom.eventByEventSeriesIndexName}
                        KeySchema:
                            -
                                AttributeName: eventSeriesId
                                KeyType: HASH
                        Projection:
                            ProjectionType: "KEYS_ONLY"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
        EventSeriesDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.eventSeriesTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                    -
                        AttributeName: schemeVersion
                        AttributeType: N
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    -
                        IndexName: ${self:custom.eventSeriesBySchemeVersionIndexName}
                        KeySchema:
                            -
                                AttributeName: schemeVersion
                                KeyType: HASH
                        Projection:
                            ProjectionType: "KEYS_ONLY"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
        TalentDynamoTable:
            Type: AWS::DynamoDB::Table
            DeletionPolicy: Retain
            Properties:
                TableName: ${self:custom.talentTableName}
                AttributeDefinitions:
                    -
                        AttributeName: id
                        AttributeType: S
                    -
                        AttributeName: schemeVersion
                        AttributeType: N
                KeySchema:
                    -
                        AttributeName: id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 2
                    WriteCapacityUnits: 1
                GlobalSecondaryIndexes:
                    -
                        IndexName: ${self:custom.talentBySchemeVersionIndexName}
                        KeySchema:
                            -
                                AttributeName: "schemeVersion"
                                KeyType: HASH
                        Projection:
                            ProjectionType: "KEYS_ONLY"
                        ProvisionedThroughput:
                            ReadCapacityUnits: 2
                            WriteCapacityUnits: 1
